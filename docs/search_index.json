[["index.html", "西山 他『計量経済学』のためのR はじめに", " 西山 他『計量経済学』のためのR 北川梨津 2020-02-20 はじめに 本稿では，西谷慶彦・新谷元嗣・川口大司・奥井亮（2019）『計量経済学』有斐閣の実証例を再現するためのRのサンプルコードを紹介します．Rの基本的な使い方を前提知識として仮定しています． 有斐閣のウェブサポートページでは，実証例の再現や実証の練習問題に必要なデータセットが公開されています．データセットはそこからダウンロードしてください．また，有斐閣のウェブサポートページでは，StataとEViewsのサンプルコードも用意されています．それらのソフトウェアが得意な人は，そちらも参照してみるとよいでしょう． "],["caution.html", "おことわり", " おことわり Figure 1: My pretty portrait. ;-) 本稿は『計量経済学』の一読者である北川梨津により作成されています1． お気づきの点がありましたら，どうかTwitterのDMから優しく教えてください． [2020-02-18] 早稲田大学政治経済学部の「応用計量経済学ー経済学における因果推論ー」という科目のTAをすることになり，その指定教科書の一つが『計量経済学』だったので，せっかくだからと思って，滞っていた作業を再開しました2．8章と9章を追加しました．説明をもう少し丁寧にしていきたいと思います．マクロ編は気が向いたら追加します． 質問があればTwitterのメンションかDMで聞いてください．わかる範囲＆時間が許す範囲で答えます． [追記 2021-02-20] 早稲田大学政治経済学部経済学科．Twitter:@ritsu1997.↩︎ ちなみに今の所属は早稲田大学大学院経済学研究科です．↩︎ "],["ch2.html", "第2章 データの整理と確率変数の基礎 練習問題 2-1 練習問題 2-3 補足", " 第2章 データの整理と確率変数の基礎 練習問題 2-1 標本平均，不偏分散，中央値はそれぞれ，mean()，var()，median()関数で求められます． mydata &lt;- read.csv(&quot;02_practice_01.csv&quot;, header = F) mean(mydata$V1) # 標本平均 ## [1] 10 var(mydata$V1) # 不偏分散 ## [1] 18.10526 median(mydata$V1) # 中央値 ## [1] 10 最頻値を求めるビルトイン関数はRにはありません．例えば次のように関数を定義することで最頻値を求められます3． Mode &lt;- function(x) { ux &lt;- unique(x) tab &lt;- tabulate(match(x, ux)) ux[tab == max(tab)] } Mode(mydata$V1) # 最頻値 ## [1] 10 練習問題 2-3 散布図を書くにはplot()関数を用います． mydata2 &lt;- read.csv(&quot;02_practice_03.csv&quot;, header = F) plot(mydata2$V1, mydata2$V2) 共分散はvar()関数に2つの変数を引数に指定することで求められます．相関係数はcor()関数を用いて求められます． var(mydata2$V1, mydata2$V2) # 共分散 ## [1] 2.111111 cor(mydata2$V1, mydata2$V2) # 相関係数 ## [1] 0.7680295 補足 標準偏差はsd()関数で求められます． sd(mydata$V1) ## [1] 4.255028 ggplot2パッケージを用いれば，もう少しだけ見てくれが良い感じの散布図が簡単に描けます． library(ggplot2) ggplot(mydata2, aes(x = V1, y = V2)) + geom_point() https://stackoverflow.com/questions/2547402/is-there-a-built-in-function-for-finding-the-mode を参考にしました．↩︎ "],["ch3.html", "第3章 統計理論の基礎 練習問題 3-2 補足", " 第3章 統計理論の基礎 練習問題 3-2 mydata &lt;- read.csv(&quot;02_practice_01.csv&quot;, header = F) mu &lt;- 8 # 帰無仮説のもとでの母平均 xbar &lt;- mean(mydata$V1) # 標本平均 sig2 &lt;- var(mydata$V1) # 不偏分散 sig &lt;- sqrt(sig2) # 標準偏差 n &lt;- length(mydata$V1) # サンプルサイズ se &lt;- sig / sqrt(n) # 標準誤差 tscore &lt;- (xbar - mu) / se # t統計量 dof &lt;- n - 1 # 自由度 pval &lt;- 2 * pt(abs(tscore), df = dof, lower.tail = F) # p値 pval ## [1] 0.04911477 補足 t.test()関数を用いれば簡単にt検定を実施できます． t.test(mydata$V1, mu = 8) ## ## One Sample t-test ## ## data: mydata$V1 ## t = 2.102, df = 19, p-value = 0.04911 ## alternative hypothesis: true mean is not equal to 8 ## 95 percent confidence interval: ## 8.008586 11.991414 ## sample estimates: ## mean of x ## 10 "],["ch4.html", "第4章 線形単回帰モデルの推定と検定 実証例 4.1 （線形単回帰） 練習問題 4-2 補足", " 第4章 線形単回帰モデルの推定と検定 実証例 4.1 （線形単回帰） (pp.128-129) lm()関数を用いれば簡単に線形回帰モデルのパラメータを推定することができます．回帰モデルの推定に用いる関数は多くの場合，はじめの引数formulaで回帰式を指定します．たとえば，\\(y = \\beta_0 + \\beta_1 x + \\varepsilon\\)というモデルなら，formula = y ~ xのように式を表現します．その次にdataという引数で，どのデータフレームを用いているかを指定します． mydata &lt;- read.csv(&quot;ch04_wage.csv&quot;) result &lt;- lm(formula = wage ~ productivity, data = mydata) result ## ## Call: ## lm(formula = wage ~ productivity, data = mydata) ## ## Coefficients: ## (Intercept) productivity ## 276.1296 0.5468 さらに，summary()関数を用いることで簡単に\\(t\\)検定を行うことができます． summary(result) ## ## Call: ## lm(formula = wage ~ productivity, data = mydata) ## ## Residuals: ## Min 1Q Median 3Q Max ## -47.618 -17.612 4.186 21.946 37.052 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 276.12961 87.61057 3.152 0.00525 ** ## productivity 0.54682 0.02442 22.395 4.04e-15 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 25.77 on 19 degrees of freedom ## Multiple R-squared: 0.9635, Adjusted R-squared: 0.9616 ## F-statistic: 501.5 on 1 and 19 DF, p-value: 4.037e-15 教科書では不均一分散に頑健な標準誤差を用いています．estimatrパッケージを用いれば簡単に不均一分散に頑健な標準誤差を用いた検定が行えます．formula =という箇所は毎回書くのが面倒ならば，省略することができます． library(estimatr) result_robust &lt;- lm_robust(wage ~ productivity, data = mydata, se_type = &quot;stata&quot;) summary(result_robust) ## ## Call: ## lm_robust(formula = wage ~ productivity, data = mydata, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 276.1296 71.25559 3.875 1.019e-03 126.990 425.2693 19 ## productivity 0.5468 0.02046 26.722 1.553e-16 0.504 0.5896 19 ## ## Multiple R-squared: 0.9635 , Adjusted R-squared: 0.9616 ## F-statistic: 714.1 on 1 and 19 DF, p-value: &lt; 2.2e-16 \\(\\beta_1 = 1\\)という帰無仮説の下での\\(t\\)統計量は次のように求められます． beta1 &lt;- result_robust$coefficients[&quot;productivity&quot;] se &lt;- result_robust$std.error[&quot;productivity&quot;] tstat &lt;- (beta1 - 1) / se tstat ## productivity ## -22.14628 区間推定は次の通り行えます．1.96をqnorm(0.975)としても構いません．qnorm(p)関数は標準正規分布の\\(100p\\%\\)分位点となる値を求める関数です． upper &lt;- beta1 + 1.96 * se lower &lt;- beta1 - 1.96 * se lower ## productivity ## 0.506712 upper ## productivity ## 0.5869272 練習問題 4-2 この練習問題のデータセットのln(2013人口）という変数は最後の丸括弧が全角になっています．また，いくつかの変数名は数字から始まっていますが，Rでは変数の名前を数字から始めることは推奨されません．さらに，変数名に日本語を含めることもコーディングの効率性の観点から推奨されません．したがって，はじめにデータセットの変数名を変更します．後は実証例4.1と同じような手続きです． library(readxl) mydata2 &lt;- read_excel(&quot;data for chap 4 exercise 2.xlsx&quot;) colnames(mydata2) &lt;- c(&quot;prefecture&quot;, &quot;pop2013&quot;, &quot;gdp2013&quot;, &quot;log_pop2013&quot;, &quot;log_gdp2013&quot;) 補足 残差は次の通り求められます． mydata &lt;- read.csv(&quot;ch04_wage.csv&quot;) result &lt;- lm(wage ~ productivity, data = mydata) result$residuals "],["ch5.html", "第5章 線形重回帰モデルの推定と検定 実証例 5.1 （線形重回帰） 実証例 5.2 （FWL定理１） 実証例 5.3 （FWL定理２） 実証例 5.4 （標準誤差） 実証例 5.5 （多項式モデル） 実証例 5.6 （交差項１） 実証例 5.7 （交差項２） 実証例 5.8 （結合仮説）", " 第5章 線形重回帰モデルの推定と検定 はじめに，不足している変数をつくります． mydata &lt;- read.csv(&quot;youdou.csv&quot;) mydata$lny80 &lt;- log(mydata$y80) mydata$lny99 &lt;- log(mydata$y99) mydata$lny90 &lt;- log(mydata$y90) mydata$growthrate8099 &lt;- (mydata$lny99-mydata$lny80) / 19 mydata$growthrate8090 &lt;- (mydata$lny90-mydata$lny80) / 10 mydata$growthrate8099 &lt;- mydata$growthrate8099 * 100 実証例 5.1 （線形重回帰） (pp.151-152) 線形重回帰モデルの推定もlm()関数で行えます．lm(y ~ x1 + x2 + x3, data)のようにして，複数の説明変数を含めることができます． model1 &lt;- lm(growthrate8099 ~ trust80 + education80 + lny80, data = mydata) model1 ## ## Call: ## lm(formula = growthrate8099 ~ trust80 + education80 + lny80, ## data = mydata) ## ## Coefficients: ## (Intercept) trust80 education80 lny80 ## 6.04885 0.02058 2.61208 -2.38309 model2 &lt;- lm(growthrate8099 ~ norm80 + education80 + lny80, data = mydata) model2 ## ## Call: ## lm(formula = growthrate8099 ~ norm80 + education80 + lny80, data = mydata) ## ## Coefficients: ## (Intercept) norm80 education80 lny80 ## 5.2909 0.3383 4.3872 -1.9911 実証例 5.2 （FWL定理１） (p.154) model1 ## ## Call: ## lm(formula = growthrate8099 ~ trust80 + education80 + lny80, ## data = mydata) ## ## Coefficients: ## (Intercept) trust80 education80 lny80 ## 6.04885 0.02058 2.61208 -2.38309 reg1 &lt;- lm(trust80 ~ education80 + lny80, data = mydata) reg1 # 回帰 ## ## Call: ## lm(formula = trust80 ~ education80 + lny80, data = mydata) ## ## Coefficients: ## (Intercept) education80 lny80 ## 2.674 -11.289 -1.025 res1 &lt;- reg1$residuals # 残差 reg2 &lt;- lm(growthrate8099 ~ education80 + lny80, data = mydata) reg2 ## ## Call: ## lm(formula = growthrate8099 ~ education80 + lny80, data = mydata) ## ## Coefficients: ## (Intercept) education80 lny80 ## 6.104 2.380 -2.404 res2 &lt;- reg2$residuals model3 &lt;- lm(res2 ~ 0 + res1) # 定数項を0として推定 model3 ## ## Call: ## lm(formula = res2 ~ 0 + res1) ## ## Coefficients: ## res1 ## 0.02058 実証例 5.3 （FWL定理２） (pp.155-156) reg1 &lt;- lm(trust80 ~ education80 + lny80, data = mydata) reg1 # 回帰 ## ## Call: ## lm(formula = trust80 ~ education80 + lny80, data = mydata) ## ## Coefficients: ## (Intercept) education80 lny80 ## 2.674 -11.289 -1.025 res1 &lt;- reg1$residuals # 残差 model4 &lt;- lm(mydata$growthrate8099 ~ 0 + res1) # 定数項を0として推定 model4 ## ## Call: ## lm(formula = mydata$growthrate8099 ~ 0 + res1) ## ## Coefficients: ## res1 ## 0.02058 実証例 5.4 （標準誤差） (p.163) library(estimatr) result_robust1 &lt;- lm_robust(growthrate8099 ~ trust80 + education80 + lny80, data = mydata, se_type = &quot;stata&quot;) summary(result_robust1) ## ## Call: ## lm_robust(formula = growthrate8099 ~ trust80 + education80 + ## lny80, data = mydata, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 6.04885 0.42643 14.1849 8.041e-18 5.189 6.9088 43 ## trust80 0.02058 0.07564 0.2721 7.868e-01 -0.132 0.1731 43 ## education80 2.61208 2.70857 0.9644 3.403e-01 -2.850 8.0744 43 ## lny80 -2.38309 0.49147 -4.8489 1.658e-05 -3.374 -1.3920 43 ## ## Multiple R-squared: 0.5619 , Adjusted R-squared: 0.5313 ## F-statistic: 20.21 on 3 and 43 DF, p-value: 2.531e-08 result_robust2 &lt;- lm_robust(growthrate8099 ~ norm80 + education80 + lny80, data = mydata, se_type = &quot;stata&quot;) summary(result_robust2) ## ## Call: ## lm_robust(formula = growthrate8099 ~ norm80 + education80 + lny80, ## data = mydata, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 5.2909 0.6682 7.918 6.204e-10 3.94324 6.6385 43 ## norm80 0.3383 0.1370 2.469 1.758e-02 0.06202 0.6145 43 ## education80 4.3872 1.9611 2.237 3.051e-02 0.43233 8.3421 43 ## lny80 -1.9911 0.5746 -3.465 1.213e-03 -3.14987 -0.8324 43 ## ## Multiple R-squared: 0.6391 , Adjusted R-squared: 0.614 ## F-statistic: 41.04 on 3 and 43 DF, p-value: 1.11e-12 実証例 5.5 （多項式モデル） (pp.170-171) 2乗項は，mydata$y80sq &lt;- mydata$y80sq^2などとして新しい変数として定義して回帰式に含めるか，または，lm()関数の中の回帰式にI(y80^2)として含めることで，その係数を推定するように指示することができます． library(estimatr) result_robust3 &lt;- lm_robust(growthrate8099 ~ y80 + I(y80^2), data = mydata, se_type = &quot;stata&quot;) # 2乗項 summary(result_robust3) ## ## Call: ## lm_robust(formula = growthrate8099 ~ y80 + I(y80^2), data = mydata, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 6.51866 1.38538 4.705 2.535e-05 3.72662 9.3107 44 ## y80 -1.22615 0.70791 -1.732 9.027e-02 -2.65285 0.2005 44 ## I(y80^2) 0.08935 0.08861 1.008 3.188e-01 -0.08923 0.2679 44 ## ## Multiple R-squared: 0.5503 , Adjusted R-squared: 0.5299 ## F-statistic: 27.39 on 2 and 44 DF, p-value: 1.879e-08 実証例 5.6 （交差項１） (pp.173-174) D * lny80としてlm()関数の回帰式に含めることで，D，lny80，そしてそれらの交差項の係数を推定するように指示できます． mydata$D &lt;- 1 * (mydata$did &gt; 0.4) model6 &lt;- lm(growthrate8099 ~ D * lny80, data = mydata) model6 ## ## Call: ## lm(formula = growthrate8099 ~ D * lny80, data = mydata) ## ## Coefficients: ## (Intercept) D lny80 D:lny80 ## 5.74905 -0.17551 -1.91120 0.06441 lm(growthrate8099 ~ lny80, data = subset(mydata, D == 0)) # 標本を分けて推定 ## ## Call: ## lm(formula = growthrate8099 ~ lny80, data = subset(mydata, D == ## 0)) ## ## Coefficients: ## (Intercept) lny80 ## 5.749 -1.911 lm(growthrate8099 ~ lny80, data = subset(mydata, D == 1)) # 標本を分けて推定 ## ## Call: ## lm(formula = growthrate8099 ~ lny80, data = subset(mydata, D == ## 1)) ## ## Coefficients: ## (Intercept) lny80 ## 5.574 -1.847 実証例 5.7 （交差項２） (p.175) mydata$D1 &lt;- mydata$D mydata$D2 &lt;- 1 * (mydata$lny80 &gt; 1.4) model7 &lt;- lm(growthrate8099 ~ D1 * D2, data = mydata) model7 ## ## Call: ## lm(formula = growthrate8099 ~ D1 * D2, data = mydata) ## ## Coefficients: ## (Intercept) D1 D2 D1:D2 ## 3.45474 -0.23329 -0.58003 0.04725 実証例 5.8 （結合仮説） (p.178) 出力結果の一番下に\\(F\\)統計量があります． library(estimatr) model5 &lt;- lm_robust(growthrate8099 ~ y80 + I(y80^2), se_type = &quot;stata&quot;, data = mydata) summary(model5) ## ## Call: ## lm_robust(formula = growthrate8099 ~ y80 + I(y80^2), data = mydata, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 6.51866 1.38538 4.705 2.535e-05 3.72662 9.3107 44 ## y80 -1.22615 0.70791 -1.732 9.027e-02 -2.65285 0.2005 44 ## I(y80^2) 0.08935 0.08861 1.008 3.188e-01 -0.08923 0.2679 44 ## ## Multiple R-squared: 0.5503 , Adjusted R-squared: 0.5299 ## F-statistic: 27.39 on 2 and 44 DF, p-value: 1.879e-08 "],["panel.html", "第6章 パネルデータ分析 実証例 6.1 （固定効果推定） 実証例 6.2 （標準誤差） 実証例 6.3 （プールされたOLS） 実証例 6.4 （時間効果） 実証例 6.5 （都道府県効果と年効果） 実証例 6.6 （個別トレンドと年効果）", " 第6章 パネルデータ分析 データを読み込み，必要な加工をします． mydata &lt;- read.csv(&quot;yamaguchi.csv&quot;) mydata2 &lt;- subset(mydata, year &gt; 1995 &amp; hh.type == &quot;all&quot;) 実証例 6.1 （固定効果推定） (pp.220-221)． パネルデータ分析もestimatrパッケージのlm_robust()関数で次のように行えます． library(estimatr) model1 &lt;- lm_robust(emp.rate ~ cap.rate, data = mydata2, clusters = pref, fixed_effects = ~ pref, se_type = &quot;stata&quot;) model1$coefficients ## cap.rate ## 0.8051027 model1$std.error ## cap.rate ## 0.0553063 実証例 6.2 （標準誤差） (p.231) library(estimatr) model1 &lt;- lm_robust(emp.rate ~ cap.rate, data = mydata2, clusters = pref, fixed_effects = ~ pref, se_type = &quot;stata&quot;) summary(model1) ## ## Call: ## lm_robust(formula = emp.rate ~ cap.rate, data = mydata2, clusters = pref, ## fixed_effects = ~pref, se_type = &quot;stata&quot;) ## ## Standard error type: stata ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## cap.rate 0.8051 0.05531 14.56 7.736e-19 0.6938 0.9164 46 ## ## Multiple R-squared: 0.9836 , Adjusted R-squared: 0.9754 ## Multiple R-squared (proj. model): 0.859 , Adjusted R-squared (proj. model): 0.7878 ## F-statistic (proj. model): 211.9 on 1 and 46 DF, p-value: &lt; 2.2e-16 実証例 6.3 （プールされたOLS） (pp.231-232) library(estimatr) model2 &lt;- lm_robust(emp.rate ~ cap.rate, data = mydata2, clusters = pref, se_type = &quot;stata&quot;) summary(model2) ## ## Call: ## lm_robust(formula = emp.rate ~ cap.rate, data = mydata2, clusters = pref, ## se_type = &quot;stata&quot;) ## ## Standard error type: stata ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.2081 0.02820 7.381 2.451e-09 0.1514 0.2649 46 ## cap.rate 0.6155 0.06743 9.128 6.823e-12 0.4798 0.7512 46 ## ## Multiple R-squared: 0.5336 , Adjusted R-squared: 0.5302 ## F-statistic: 83.32 on 1 and 46 DF, p-value: 6.823e-12 実証例 6.4 （時間効果） (p.236) library(estimatr) model3 &lt;- lm_robust(emp.rate ~ cap.rate, data = mydata2, fixed_effects = ~ factor(year), clusters = pref, se_type = &quot;stata&quot;) summary(model3) ## ## Call: ## lm_robust(formula = emp.rate ~ cap.rate, data = mydata2, clusters = pref, ## fixed_effects = ~factor(year), se_type = &quot;stata&quot;) ## ## Standard error type: stata ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## cap.rate 0.5848 0.07302 8.01 2.864e-10 0.4378 0.7318 46 ## ## Multiple R-squared: 0.5461 , Adjusted R-squared: 0.5361 ## Multiple R-squared (proj. model): 0.4897 , Adjusted R-squared (proj. model): 0.4785 ## F-statistic (proj. model): 64.15 on 1 and 46 DF, p-value: 2.864e-10 実証例 6.5 （都道府県効果と年効果） (pp.239-240) library(estimatr) model4 &lt;- lm_robust(emp.rate ~ cap.rate, data = mydata2, fixed_effects = ~ pref + factor(year), clusters = pref, se_type = &quot;stata&quot;) summary(model4) ## ## Call: ## lm_robust(formula = emp.rate ~ cap.rate, data = mydata2, clusters = pref, ## fixed_effects = ~pref + factor(year), se_type = &quot;stata&quot;) ## ## Standard error type: stata ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## cap.rate 0.09032 0.07357 1.228 0.2258 -0.05776 0.2384 46 ## ## Multiple R-squared: 0.9946 , Adjusted R-squared: 0.9917 ## Multiple R-squared (proj. model): 0.02776 , Adjusted R-squared (proj. model): -0.4958 ## F-statistic (proj. model): 1.507 on 1 and 46 DF, p-value: 0.2258 実証例 6.6 （個別トレンドと年効果） (p.241) library(estimatr) model5 &lt;- lm_robust(emp.rate ~ cap.rate + pref + pref:year + factor(year), data = mydata2, clusters = pref, se_type = &quot;stata&quot;) summary(model5) ## 1 coefficient not defined because the design matrix is rank deficient ## ## Call: ## lm_robust(formula = emp.rate ~ cap.rate + pref + pref:year + ## factor(year), data = mydata2, clusters = pref, se_type = &quot;stata&quot;) ## ## Standard error type: stata ## ## Coefficients: (1 not defined because the design matrix is rank deficient) ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## (Intercept) NA NA NA NA NA ## cap.rate 9.153e-02 1.712e-01 0.53463 5.955e-01 -2.531e-01 ## pref京都府 -2.872e+00 2.980e-01 -9.63677 1.303e-12 -3.472e+00 ## pref佐賀県 2.218e+00 1.039e+00 2.13478 3.814e-02 1.266e-01 ## pref兵庫県 -1.674e+00 3.097e-01 -5.40610 2.224e-06 -2.297e+00 ## pref北海道 -2.027e+00 3.720e-01 -5.44973 1.917e-06 -2.776e+00 ## pref千葉県 1.009e+00 8.236e-01 1.22458 2.270e-01 -6.492e-01 ## pref和歌山県 -2.425e+00 1.996e+00 -1.21507 2.305e-01 -6.443e+00 ## pref埼玉県 -3.205e+00 2.345e-01 -13.66684 8.268e-18 -3.677e+00 ## pref大分県 5.074e-03 1.070e-01 0.04740 9.624e-01 -2.104e-01 ## pref大阪府 -3.545e+00 5.792e-01 -6.12045 1.910e-07 -4.710e+00 ## pref奈良県 -2.726e+00 2.286e-01 -11.92401 1.133e-15 -3.186e+00 ## pref宮城県 6.645e+00 2.957e-01 22.47057 1.926e-26 6.050e+00 ## pref宮崎県 8.787e-01 7.168e-02 12.25954 4.265e-16 7.344e-01 ## pref富山県 6.196e-01 2.014e+00 0.30765 7.597e-01 -3.434e+00 ## pref山口県 1.556e+00 2.694e-01 5.77686 6.247e-07 1.014e+00 ## pref山形県 1.262e+01 1.221e+00 10.34106 1.386e-13 1.017e+01 ## pref山梨県 1.025e+00 2.030e+00 0.50479 6.161e-01 -3.062e+00 ## pref岐阜県 1.822e+00 5.201e-01 3.50354 1.034e-03 7.752e-01 ## pref岡山県 1.027e+00 7.911e-01 1.29863 2.005e-01 -5.651e-01 ## pref岩手県 3.841e+00 2.154e+00 1.78307 8.117e-02 -4.950e-01 ## pref島根県 -2.456e+00 3.854e+00 -0.63729 5.271e-01 -1.021e+01 ## pref広島県 1.248e+00 3.023e-01 4.12963 1.515e-04 6.398e-01 ## pref徳島県 1.758e+00 5.669e-01 3.10055 3.294e-03 6.165e-01 ## pref愛媛県 -4.405e-01 7.973e-01 -0.55244 5.833e-01 -2.045e+00 ## pref愛知県 3.278e-01 7.286e-01 0.44993 6.549e-01 -1.139e+00 ## pref新潟県 3.478e+00 1.424e+00 2.44232 1.849e-02 6.115e-01 ## pref東京都 7.338e-01 1.592e+00 0.46102 6.470e-01 -2.470e+00 ## pref栃木県 3.625e+00 8.809e-02 41.15468 6.113e-38 3.448e+00 ## pref沖縄県 4.900e-01 6.461e-01 0.75843 4.521e-01 -8.104e-01 ## pref滋賀県 1.900e+00 2.319e-01 8.19405 1.533e-10 1.434e+00 ## pref熊本県 3.927e+00 2.068e-01 18.98763 2.125e-23 3.511e+00 ## pref石川県 3.910e-01 1.235e+00 0.31674 7.529e-01 -2.094e+00 ## pref神奈川県 -6.634e-01 1.871e-01 -3.54668 9.101e-04 -1.040e+00 ## pref福井県 3.535e+00 1.824e+00 1.93829 5.874e-02 -1.361e-01 ## pref福岡県 1.498e+00 6.315e-01 2.37182 2.194e-02 2.266e-01 ## pref福島県 1.117e+01 5.085e-01 21.97247 4.955e-26 1.015e+01 ## pref秋田県 1.732e+00 2.861e+00 0.60556 5.478e-01 -4.026e+00 ## pref群馬県 -4.778e+00 1.219e+00 -3.92071 2.918e-04 -7.231e+00 ## pref茨城県 1.526e+00 6.399e-01 2.38507 2.125e-02 2.382e-01 ## pref長崎県 -6.210e-01 1.310e+00 -0.47409 6.377e-01 -3.258e+00 ## pref長野県 2.193e+00 1.029e+00 2.13188 3.839e-02 1.224e-01 ## pref青森県 -1.479e+00 2.071e+00 -0.71414 4.788e-01 -5.647e+00 ## pref静岡県 1.469e+00 4.231e-01 3.47143 1.137e-03 6.172e-01 ## pref香川県 -2.332e-01 1.591e-01 -1.46527 1.497e-01 -5.535e-01 ## pref高知県 7.651e+00 3.197e-01 23.92762 1.338e-27 7.007e+00 ## pref鳥取県 1.845e+00 6.879e-01 2.68281 1.011e-02 4.608e-01 ## pref鹿児島県 -1.878e+00 3.171e-01 -5.92202 3.790e-07 -2.516e+00 ## factor(year)2005 3.621e-02 5.450e-03 6.64355 3.126e-08 2.524e-02 ## factor(year)2010 7.468e-02 1.193e-02 6.26138 1.173e-07 5.067e-02 ## pref三重県:year 1.645e-04 3.027e-05 5.43399 2.023e-06 1.036e-04 ## pref京都府:year 1.580e-03 1.206e-04 13.09579 3.974e-17 1.337e-03 ## pref佐賀県:year -8.904e-04 5.485e-04 -1.62323 1.114e-01 -1.995e-03 ## pref兵庫県:year 9.560e-04 1.363e-04 7.01556 8.636e-09 6.817e-04 ## pref北海道:year 1.147e-03 1.678e-04 6.83144 1.632e-08 8.088e-04 ## pref千葉県:year -3.812e-04 3.952e-04 -0.96474 3.397e-01 -1.177e-03 ## pref和歌山県:year 1.346e-03 1.031e-03 1.30553 1.982e-01 -7.293e-04 ## pref埼玉県:year 1.723e-03 1.040e-04 16.57567 5.033e-21 1.514e-03 ## pref大分県:year 1.766e-04 2.903e-05 6.08266 2.177e-07 1.181e-04 ## pref大阪府:year 1.880e-03 3.081e-04 6.10389 2.023e-07 1.260e-03 ## pref奈良県:year 1.470e-03 1.376e-04 10.68435 4.755e-14 1.193e-03 ## pref宮城県:year -3.143e-03 1.619e-04 -19.40706 8.677e-24 -3.469e-03 ## pref宮崎県:year -2.219e-04 6.967e-05 -3.18427 2.604e-03 -3.621e-04 ## pref富山県:year -7.061e-05 1.047e-03 -0.06745 9.465e-01 -2.178e-03 ## pref山口県:year -6.136e-04 1.079e-04 -5.68869 8.458e-07 -8.307e-04 ## pref山形県:year -6.021e-03 6.334e-04 -9.50535 1.992e-12 -7.296e-03 ## pref山梨県:year -3.364e-04 1.048e-03 -0.32100 7.497e-01 -2.446e-03 ## pref岐阜県:year -7.488e-04 2.898e-04 -2.58330 1.303e-02 -1.332e-03 ## pref岡山県:year -3.387e-04 4.218e-04 -0.80301 4.261e-01 -1.188e-03 ## pref岩手県:year -1.691e-03 1.102e-03 -1.53400 1.319e-01 -3.909e-03 ## pref島根県:year 1.476e-03 1.961e-03 0.75263 4.555e-01 -2.471e-03 ## pref広島県:year -4.638e-04 1.783e-04 -2.60123 1.245e-02 -8.227e-04 ## pref徳島県:year -6.795e-04 3.147e-04 -2.15953 3.606e-02 -1.313e-03 ## pref愛媛県:year 3.762e-04 3.701e-04 1.01644 3.147e-01 -3.688e-04 ## pref愛知県:year -2.572e-05 3.374e-04 -0.07623 9.396e-01 -7.049e-04 ## pref新潟県:year -1.503e-03 7.503e-04 -2.00368 5.101e-02 -3.013e-03 ## pref東京都:year -2.339e-04 7.729e-04 -0.30257 7.636e-01 -1.790e-03 ## pref栃木県:year -1.633e-03 6.269e-05 -26.04540 3.518e-29 -1.759e-03 ## pref沖縄県:year -4.421e-05 3.427e-04 -0.12902 8.979e-01 -7.340e-04 ## pref滋賀県:year -7.992e-04 9.387e-05 -8.51357 5.234e-11 -9.881e-04 ## pref熊本県:year -1.746e-03 6.820e-05 -25.60405 7.347e-29 -1.884e-03 ## pref石川県:year 3.479e-05 6.636e-04 0.05243 9.584e-01 -1.301e-03 ## pref神奈川県:year 4.400e-04 8.176e-05 5.38140 2.420e-06 2.754e-04 ## pref福井県:year -1.520e-03 9.530e-04 -1.59461 1.176e-01 -3.438e-03 ## pref福岡県:year -5.911e-04 2.895e-04 -2.04146 4.696e-02 -1.174e-03 ## pref福島県:year -5.360e-03 2.700e-04 -19.85146 3.414e-24 -5.903e-03 ## pref秋田県:year -6.235e-04 1.460e-03 -0.42714 6.713e-01 -3.562e-03 ## pref群馬県:year 2.554e-03 6.348e-04 4.02398 2.114e-04 1.277e-03 ## pref茨城県:year -6.014e-04 3.372e-04 -1.78371 8.107e-02 -1.280e-03 ## pref長崎県:year 5.084e-04 6.835e-04 0.74377 4.608e-01 -8.675e-04 ## pref長野県:year -9.270e-04 5.525e-04 -1.67763 1.002e-01 -2.039e-03 ## pref青森県:year 9.522e-04 1.070e-03 0.88980 3.782e-01 -1.202e-03 ## pref静岡県:year -5.695e-04 1.941e-04 -2.93476 5.194e-03 -9.601e-04 ## pref香川県:year 3.020e-04 1.086e-04 2.77994 7.850e-03 8.334e-05 ## pref高知県:year -3.589e-03 1.098e-04 -32.70362 1.692e-33 -3.810e-03 ## pref鳥取県:year -6.802e-04 3.858e-04 -1.76288 8.456e-02 -1.457e-03 ## pref鹿児島県:year 1.115e-03 1.334e-04 8.35871 8.801e-11 8.468e-04 ## CI Upper DF ## (Intercept) NA NA ## cap.rate 4.361e-01 46 ## pref京都府 -2.272e+00 46 ## pref佐賀県 4.309e+00 46 ## pref兵庫県 -1.051e+00 46 ## pref北海道 -1.278e+00 46 ## pref千葉県 2.666e+00 46 ## pref和歌山県 1.592e+00 46 ## pref埼玉県 -2.733e+00 46 ## pref大分県 2.205e-01 46 ## pref大阪府 -2.379e+00 46 ## pref奈良県 -2.266e+00 46 ## pref宮城県 7.240e+00 46 ## pref宮崎県 1.023e+00 46 ## pref富山県 4.674e+00 46 ## pref山口県 2.099e+00 46 ## pref山形県 1.508e+01 46 ## pref山梨県 5.112e+00 46 ## pref岐阜県 2.869e+00 46 ## pref岡山県 2.620e+00 46 ## pref岩手県 8.176e+00 46 ## pref島根県 5.301e+00 46 ## pref広島県 1.857e+00 46 ## pref徳島県 2.899e+00 46 ## pref愛媛県 1.164e+00 46 ## pref愛知県 1.795e+00 46 ## pref新潟県 6.344e+00 46 ## pref東京都 3.938e+00 46 ## pref栃木県 3.803e+00 46 ## pref沖縄県 1.790e+00 46 ## pref滋賀県 2.367e+00 46 ## pref熊本県 4.343e+00 46 ## pref石川県 2.876e+00 46 ## pref神奈川県 -2.869e-01 46 ## pref福井県 7.206e+00 46 ## pref福岡県 2.769e+00 46 ## pref福島県 1.220e+01 46 ## pref秋田県 7.491e+00 46 ## pref群馬県 -2.325e+00 46 ## pref茨城県 2.814e+00 46 ## pref長崎県 2.016e+00 46 ## pref長野県 4.263e+00 46 ## pref青森県 2.689e+00 46 ## pref静岡県 2.321e+00 46 ## pref香川県 8.715e-02 46 ## pref高知県 8.294e+00 46 ## pref鳥取県 3.230e+00 46 ## pref鹿児島県 -1.240e+00 46 ## factor(year)2005 4.718e-02 46 ## factor(year)2010 9.869e-02 46 ## pref三重県:year 2.254e-04 46 ## pref京都府:year 1.822e-03 46 ## pref佐賀県:year 2.137e-04 46 ## pref兵庫県:year 1.230e-03 46 ## pref北海道:year 1.484e-03 46 ## pref千葉県:year 4.142e-04 46 ## pref和歌山県:year 3.421e-03 46 ## pref埼玉県:year 1.933e-03 46 ## pref大分県:year 2.350e-04 46 ## pref大阪府:year 2.501e-03 46 ## pref奈良県:year 1.747e-03 46 ## pref宮城県:year -2.817e-03 46 ## pref宮崎県:year -8.161e-05 46 ## pref富山県:year 2.037e-03 46 ## pref山口県:year -3.965e-04 46 ## pref山形県:year -4.746e-03 46 ## pref山梨県:year 1.773e-03 46 ## pref岐阜県:year -1.653e-04 46 ## pref岡山県:year 5.103e-04 46 ## pref岩手県:year 5.278e-04 46 ## pref島根県:year 5.422e-03 46 ## pref広島県:year -1.049e-04 46 ## pref徳島県:year -4.614e-05 46 ## pref愛媛県:year 1.121e-03 46 ## pref愛知県:year 6.534e-04 46 ## pref新潟県:year 6.915e-06 46 ## pref東京都:year 1.322e-03 46 ## pref栃木県:year -1.507e-03 46 ## pref沖縄県:year 6.456e-04 46 ## pref滋賀県:year -6.102e-04 46 ## pref熊本県:year -1.609e-03 46 ## pref石川県:year 1.370e-03 46 ## pref神奈川県:year 6.045e-04 46 ## pref福井県:year 3.986e-04 46 ## pref福岡県:year -8.272e-06 46 ## pref福島県:year -4.816e-03 46 ## pref秋田県:year 2.315e-03 46 ## pref群馬県:year 3.832e-03 46 ## pref茨城県:year 7.728e-05 46 ## pref長崎県:year 1.884e-03 46 ## pref長野県:year 1.852e-04 46 ## pref青森県:year 3.106e-03 46 ## pref静岡県:year -1.789e-04 46 ## pref香川県:year 5.207e-04 46 ## pref高知県:year -3.368e-03 46 ## pref鳥取県:year 9.646e-05 46 ## pref鹿児島県:year 1.384e-03 46 ## ## Multiple R-squared: 0.9994 , Adjusted R-squared: 0.9982 ## F-statistic: NA on 95 and 46 DF, p-value: NA "],["iv.html", "第7章 操作変数法 実証例 7.1 （単回帰） 実証例 7.2 （標準誤差） 実証例 7.3 （2SLS推定） 実証例 7.4 （操作変数の強さ） 実証例 7.5 （外生性の検定）", " 第7章 操作変数法 mydata &lt;- read.csv(&quot;ipehd_qje2009_master.csv&quot;) 実証例 7.1 （単回帰） (p.275) 操作変数法による推定を行うためにはestimatrパッケージのiv_robust()関数が便利です．iv_robust(y1 ~ y2 + x | x + z, data)のようにして使います．ただし，y1，y2は内生変数で，xは外生変数，zは操作変数を表しています．|の右側に，操作変数だけでなく外生変数も含めることに注意してください． library(estimatr) ols1 &lt;- lm_robust(f_rw ~ f_prot, data = mydata, se_type = &quot;stata&quot;) # OLS ols1 ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## (Intercept) 82.37419182 1.41304363 58.295575 7.716046e-212 79.59720830 ## f_prot 0.07998031 0.01611302 4.963708 9.830547e-07 0.04831421 ## CI Upper DF ## (Intercept) 85.1511754 450 ## f_prot 0.1116464 450 iv1 &lt;- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = &quot;stata&quot;) # IV iv1 ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper ## (Intercept) 60.4509045 5.1130987 11.822753 2.835629e-28 50.4023889 70.4994201 ## f_prot 0.4215664 0.0710932 5.929771 6.049522e-09 0.2818505 0.5612823 ## DF ## (Intercept) 450 ## f_prot 450 実証例 7.2 （標準誤差） (p.280) library(estimatr) iv1 &lt;- iv_robust(f_rw ~ f_prot | kmwittenberg, data = mydata, se_type = &quot;stata&quot;) # IV summary(iv1) ## ## Call: ## iv_robust(formula = f_rw ~ f_prot | kmwittenberg, data = mydata, ## se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 60.4509 5.11310 11.82 2.836e-28 50.4024 70.4994 450 ## f_prot 0.4216 0.07109 5.93 6.050e-09 0.2819 0.5613 450 ## ## Multiple R-squared: -0.9827 , Adjusted R-squared: -0.9871 ## F-statistic: 35.16 on 1 and 450 DF, p-value: 6.05e-09 実証例 7.3 （2SLS推定） (pp.295-296) library(estimatr) iv2 &lt;- iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata, se_type = &quot;stata&quot;) summary(iv2) ## ## Call: ## iv_robust(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss, data = mydata, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 177.3665 29.49620 6.0132 3.838e-09 119.3948 235.33821 438 ## f_prot 0.1885 0.02707 6.9640 1.217e-11 0.1353 0.24170 438 ## f_young -1.9524 0.16773 -11.6400 1.806e-27 -2.2820 -1.62271 438 ## f_jew -0.4367 0.34981 -1.2483 2.126e-01 -1.1242 0.25084 438 ## f_fem -1.0726 0.33087 -3.2419 1.278e-03 -1.7229 -0.42234 438 ## f_ortsgeb 0.6066 0.05177 11.7170 9.056e-28 0.5048 0.70835 438 ## f_pruss -0.1807 0.14177 -1.2746 2.031e-01 -0.4593 0.09794 438 ## hhsize 0.8849 1.64334 0.5385 5.905e-01 -2.3449 4.11475 438 ## lnpop -1.3181 0.95739 -1.3768 1.693e-01 -3.1998 0.56351 438 ## gpop 0.4099 0.10914 3.7558 1.961e-04 0.1954 0.62441 438 ## f_blind -27.8647 14.98451 -1.8596 6.362e-02 -57.3152 1.58580 438 ## f_deaf -52.3831 10.41183 -5.0311 7.130e-07 -72.8464 -31.91972 438 ## f_dumb 7.5290 1.70627 4.4125 1.288e-05 4.1755 10.88248 438 ## f_miss -0.5049 0.37778 -1.3366 1.821e-01 -1.2474 0.23755 438 ## ## Multiple R-squared: 0.6886 , Adjusted R-squared: 0.6794 ## F-statistic: 66.57 on 13 and 438 DF, p-value: &lt; 2.2e-16 iv3 &lt;- iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + kmwittenberg:lnpop + kmwittenberg:gpop + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata, se_type = &quot;stata&quot;) summary(iv3) ## ## Call: ## iv_robust(formula = f_rw ~ f_prot + f_young + f_jew + f_fem + ## f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + ## f_dumb + f_miss | kmwittenberg + kmwittenberg:lnpop + kmwittenberg:gpop + ## f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + ## lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata, ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 179.1507 29.13265 6.149 1.753e-09 121.8935 236.40788 438 ## f_prot 0.1853 0.02572 7.205 2.553e-12 0.1348 0.23591 438 ## f_young -1.9518 0.16695 -11.691 1.145e-27 -2.2799 -1.62366 438 ## f_jew -0.4553 0.34569 -1.317 1.885e-01 -1.1348 0.22406 438 ## f_fem -1.0800 0.33013 -3.271 1.155e-03 -1.7288 -0.43113 438 ## f_ortsgeb 0.6023 0.04980 12.093 2.996e-29 0.5044 0.70016 438 ## f_pruss -0.1858 0.14074 -1.320 1.876e-01 -0.4624 0.09085 438 ## hhsize 0.7897 1.60849 0.491 6.237e-01 -2.3716 3.95102 438 ## lnpop -1.3133 0.95155 -1.380 1.682e-01 -3.1835 0.55683 438 ## gpop 0.4020 0.10650 3.775 1.823e-04 0.1927 0.61133 438 ## f_blind -28.4769 14.69031 -1.938 5.321e-02 -57.3492 0.39532 438 ## f_deaf -52.1996 10.37314 -5.032 7.092e-07 -72.5869 -31.81228 438 ## f_dumb 7.5271 1.68652 4.463 1.029e-05 4.2124 10.84175 438 ## f_miss -0.4979 0.37693 -1.321 1.872e-01 -1.2388 0.24288 438 ## ## Multiple R-squared: 0.692 , Adjusted R-squared: 0.6828 ## F-statistic: 66.54 on 13 and 438 DF, p-value: &lt; 2.2e-16 実証例 7.4 （操作変数の強さ） (pp.298-299) library(estimatr) fs &lt;- lm_robust(f_prot ~ kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata, se_type = &quot;stata&quot;) # first-stage beta1_hat &lt;- round(fs$coefficients[2], 3) se &lt;- round(fs$std.error[2], 3) t_value &lt;- beta1_hat / se f_value &lt;- t_value ^ 2 f_value ## kmwittenberg ## 74.58678 fs2 &lt;- lm(f_prot ~ kmwittenberg + (kmwittenberg : lnpop) + (kmwittenberg : gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata) # first-stage with the interaction library(car) ## Loading required package: carData linearHypothesis(fs2, c(&quot;kmwittenberg = 0&quot;, &quot;kmwittenberg:lnpop = 0&quot;, &quot;kmwittenberg:gpop = 0&quot;), white.adjust = &quot;hc1&quot;) ## Linear hypothesis test ## ## Hypothesis: ## kmwittenberg = 0 ## kmwittenberg:lnpop = 0 ## kmwittenberg:gpop = 0 ## ## Model 1: restricted model ## Model 2: f_prot ~ kmwittenberg + (kmwittenberg:lnpop) + (kmwittenberg:gpop) + ## f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + ## lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss ## ## Note: Coefficient covariance matrix supplied. ## ## Res.Df Df F Pr(&gt;F) ## 1 439 ## 2 436 3 29.794 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 実証例 7.5 （外生性の検定） (pp.302-303) library(estimatr) library(car) iv4 &lt;- iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata) mydata$uhat1 &lt;- mydata$f_rw - iv4$fitted.values res_reg1 &lt;- lm_robust(uhat1 ~ kmwittenberg + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata, se_type = &quot;classical&quot;) summary(res_reg1) ## ## Call: ## lm_robust(formula = uhat1 ~ kmwittenberg + f_young + f_jew + ## f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + ## f_deaf + f_dumb + f_miss, data = mydata, se_type = &quot;classical&quot;) ## ## Standard error type: classical ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 3.287e-13 29.346274 1.120e-14 1 -57.677016 57.677016 438 ## kmwittenberg 2.011e-16 0.002697 7.455e-14 1 -0.005301 0.005301 438 ## f_young 1.559e-15 0.172282 9.051e-15 1 -0.338603 0.338603 438 ## f_jew -6.197e-16 0.304663 -2.034e-15 1 -0.598783 0.598783 438 ## f_fem 1.571e-15 0.329405 4.768e-15 1 -0.647412 0.647412 438 ## f_ortsgeb -2.437e-16 0.032940 -7.400e-15 1 -0.064739 0.064739 438 ## f_pruss -4.301e-15 0.196687 -2.187e-14 1 -0.386567 0.386567 438 ## hhsize -1.175e-14 1.417367 -8.290e-15 1 -2.785685 2.785685 438 ## lnpop 6.110e-15 0.952518 6.414e-15 1 -1.872075 1.872075 438 ## gpop -1.145e-15 0.099179 -1.155e-14 1 -0.194925 0.194925 438 ## f_blind -1.159e-15 12.516466 -9.260e-17 1 -24.599798 24.599798 438 ## f_deaf 5.180e-14 8.271965 6.262e-15 1 -16.257678 16.257678 438 ## f_dumb -2.739e-14 2.068650 -1.324e-14 1 -4.065715 4.065715 438 ## f_miss 1.193e-15 0.347936 3.429e-15 1 -0.683831 0.683831 438 ## ## Multiple R-squared: 9.992e-16 , Adjusted R-squared: -0.02968 ## F-statistic: 3.367e-14 on 13 and 438 DF, p-value: 1 iv5 &lt;- iv_robust(f_rw ~ f_prot + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss | kmwittenberg + (kmwittenberg : lnpop) + (kmwittenberg : gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata) mydata$uhat2 &lt;- mydata$f_rw - iv5$fitted.values res_reg2 &lt;- lm_robust(uhat2 ~ kmwittenberg + (kmwittenberg : lnpop) + (kmwittenberg : gpop) + f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss, data = mydata, se_type = &quot;classical&quot;) summary(res_reg2) ## ## Call: ## lm_robust(formula = uhat2 ~ kmwittenberg + (kmwittenberg:lnpop) + ## (kmwittenberg:gpop) + f_young + f_jew + f_fem + f_ortsgeb + ## f_pruss + hhsize + lnpop + gpop + f_blind + f_deaf + f_dumb + ## f_miss, data = mydata, se_type = &quot;classical&quot;) ## ## Standard error type: classical ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower ## (Intercept) -1.193e+01 3.738e+01 -0.319277 0.7497 -85.404372 ## kmwittenberg 3.506e-02 7.091e-02 0.494444 0.6212 -0.104309 ## f_young 6.741e-04 1.778e-01 0.003792 0.9970 -0.348694 ## f_jew -5.388e-03 3.044e-01 -0.017703 0.9859 -0.603592 ## f_fem 1.195e-02 3.287e-01 0.036363 0.9710 -0.634000 ## f_ortsgeb -5.907e-04 3.285e-02 -0.017983 0.9857 -0.065151 ## f_pruss -1.984e-03 1.960e-01 -0.010122 0.9919 -0.387260 ## hhsize 8.812e-02 1.419e+00 0.062080 0.9505 -2.701716 ## lnpop 1.034e+00 2.285e+00 0.452376 0.6512 -3.457959 ## gpop -5.554e-02 2.489e-01 -0.223140 0.8235 -0.544739 ## f_blind 8.972e-01 1.253e+01 0.071632 0.9429 -23.720658 ## f_deaf 4.100e-01 8.318e+00 0.049292 0.9607 -15.938414 ## f_dumb -2.080e-02 2.062e+00 -0.010087 0.9920 -4.073170 ## f_miss -1.432e-02 3.480e-01 -0.041155 0.9672 -0.698345 ## kmwittenberg:lnpop -3.290e-03 6.587e-03 -0.499485 0.6177 -0.016236 ## kmwittenberg:gpop 1.663e-04 6.549e-04 0.253890 0.7997 -0.001121 ## CI Upper DF ## (Intercept) 61.534577 436 ## kmwittenberg 0.174432 436 ## f_young 0.350043 436 ## f_jew 0.592816 436 ## f_fem 0.657902 436 ## f_ortsgeb 0.063970 436 ## f_pruss 0.383291 436 ## hhsize 2.877955 436 ## lnpop 5.525712 436 ## gpop 0.433659 436 ## f_blind 25.515112 436 ## f_deaf 16.758436 436 ## f_dumb 4.031575 436 ## f_miss 0.669699 436 ## kmwittenberg:lnpop 0.009656 436 ## kmwittenberg:gpop 0.001453 436 ## ## Multiple R-squared: 0.0006048 , Adjusted R-squared: -0.03378 ## F-statistic: 0.01759 on 15 and 436 DF, p-value: 1 linearHypothesis(res_reg2, c(&quot;kmwittenberg&quot;, &quot;kmwittenberg:lnpop = 0&quot;, &quot;kmwittenberg:gpop = 0&quot;)) ## Linear hypothesis test ## ## Hypothesis: ## kmwittenberg = 0 ## kmwittenberg:lnpop = 0 ## kmwittenberg:gpop = 0 ## ## Model 1: restricted model ## Model 2: uhat2 ~ kmwittenberg + (kmwittenberg:lnpop) + (kmwittenberg:gpop) + ## f_young + f_jew + f_fem + f_ortsgeb + f_pruss + hhsize + ## lnpop + gpop + f_blind + f_deaf + f_dumb + f_miss ## ## Res.Df Df Chisq Pr(&gt;Chisq) ## 1 439 ## 2 436 3 0.2638 0.9667 "],["restricted.html", "第8章 制限従属変数モデル 実証例 8.1 （ロジットとプロビット） 実証例 8.2 （順序付きプロビット） 実証例 8.3 （多項ロジット） 実証例8.4 （トービット） 実証例8.5 （ヘキット）", " 第8章 制限従属変数モデル 実証例 8.1 （ロジットとプロビット） データの読み込み・加工 pp.347-348．まず，データを加工します． piaac_original &lt;- read.csv(&quot;piaac.csv&quot;) # データの読み込み piaac &lt;- subset(piaac_original, gender == &quot;Female&quot;) # 女性だけにサンプルを制限します． piaac$emp &lt;- 1 * (piaac$lfs == &quot;Employed&quot;) 線形確率モデル ベースラインとなる線形確率モデルです．これは今までと同じです． ols &lt;- estimatr::lm_robust(emp ~ educ + age + couple + child, data = piaac, se_type = &quot;stata&quot;) summary(ols) ## ## Call: ## estimatr::lm_robust(formula = emp ~ educ + age + couple + child, ## data = piaac, se_type = &quot;stata&quot;) ## ## Standard error type: HC1 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF ## (Intercept) 0.375932 0.105430 3.566 0.0003727 0.1691497 0.58271 1742 ## educ 0.019482 0.005882 3.312 0.0009448 0.0079454 0.03102 1742 ## age 0.002013 0.001166 1.726 0.0845504 -0.0002746 0.00430 1742 ## couple -0.117846 0.031481 -3.743 0.0001874 -0.1795902 -0.05610 1742 ## child 0.013723 0.012861 1.067 0.2860951 -0.0115009 0.03895 1742 ## ## Multiple R-squared: 0.0137 , Adjusted R-squared: 0.01144 ## F-statistic: 6.665 on 4 and 1742 DF, p-value: 2.541e-05 ちなみに，予測確率を確認すると，1を超える者が1名います．0を下回る者はいないようです． sum(ols$fitted.values &gt; 1) ## [1] 1 sum(ols$fitted.values &lt; 0) ## [1] 0 プロビット・モデル プロビット・モデルやロジット・モデルの推定には，glm()という関数を使います．基本的な操作は，lm()と同じです． probit &lt;- glm(emp ~ educ + age + couple + child, family = binomial(link = &quot;probit&quot;), data = piaac) summary(probit) ## ## Call: ## glm(formula = emp ~ educ + age + couple + child, family = binomial(link = &quot;probit&quot;), ## data = piaac) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.9149 -1.3774 0.8631 0.9542 1.2290 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.344270 0.288020 -1.195 0.231970 ## educ 0.053671 0.016076 3.339 0.000842 *** ## age 0.005297 0.002997 1.767 0.077161 . ## couple -0.339106 0.097026 -3.495 0.000474 *** ## child 0.039649 0.033777 1.174 0.240461 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2264.1 on 1746 degrees of freedom ## Residual deviance: 2239.5 on 1742 degrees of freedom ## (958 observations deleted due to missingness) ## AIC: 2249.5 ## ## Number of Fisher Scoring iterations: 4 平均限界効果を推定するためには，marginsというパッケージのmargins()という関数が便利です． probit_ame &lt;- margins::margins(probit) summary(probit_ame) ## factor AME SE z p lower upper ## age 0.0019 0.0011 1.7721 0.0764 -0.0002 0.0041 ## child 0.0145 0.0124 1.1751 0.2400 -0.0097 0.0388 ## couple -0.1243 0.0352 -3.5298 0.0004 -0.1933 -0.0553 ## educ 0.0197 0.0058 3.3702 0.0008 0.0082 0.0311 ロジット・モデル 教科書が第1刷である場合，表8-1のロジット・モデルの係数の推定値の標準誤差に誤植がありますから，注意してください． logit &lt;- glm(emp ~ educ + age + couple + child, family = binomial(link = &quot;logit&quot;), data = piaac) summary(logit) ## ## Call: ## glm(formula = emp ~ educ + age + couple + child, family = binomial(link = &quot;logit&quot;), ## data = piaac) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.9583 -1.3755 0.8639 0.9534 1.2324 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.578109 0.471171 -1.227 0.219837 ## educ 0.086867 0.026266 3.307 0.000942 *** ## age 0.008822 0.004886 1.806 0.070975 . ## couple -0.558740 0.163200 -3.424 0.000618 *** ## child 0.071606 0.057635 1.242 0.214084 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2264.1 on 1746 degrees of freedom ## Residual deviance: 2239.4 on 1742 degrees of freedom ## (958 observations deleted due to missingness) ## AIC: 2249.4 ## ## Number of Fisher Scoring iterations: 4 logit_ame &lt;- margins::margins(logit) summary(logit_ame) ## factor AME SE z p lower upper ## age 0.0020 0.0011 1.8118 0.0700 -0.0002 0.0041 ## child 0.0161 0.0129 1.2442 0.2134 -0.0093 0.0414 ## couple -0.1255 0.0362 -3.4630 0.0005 -0.1965 -0.0545 ## educ 0.0195 0.0058 3.3453 0.0008 0.0081 0.0309 実証例 8.2 （順序付きプロビット） データの読み込み・加工 pp.356-357．まず，データを加工します． piaac_original &lt;- read.csv(&quot;piaac.csv&quot;) # データの読み込み piaac&lt;- subset(piaac_original, gender == &quot;Male&quot;) # 女性だけにサンプルを制限します． piaac$js &lt;- factor(piaac$js, levels = c(&quot;Extremely dissatisfied&quot;, &quot;Dissatisfied&quot;, &quot;Neither satisfied nor dissatisfied&quot;, &quot;Satisfied&quot;, &quot;Extremely satisfied&quot;)) 順序付きプロビット・モデル 順序付きプロビット・モデルの推定は，oglmxというパッケージのoprobit.reg()という関数が便利です．基本的な使い方は，lm()関数と同じです． library(oglmx) ## Loading required package: maxLik ## Loading required package: miscTools ## ## Please cite the &#39;maxLik&#39; package as: ## Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1. ## ## If you have questions, suggestions, or comments regarding the &#39;maxLik&#39; package, please use a forum or &#39;tracker&#39; at maxLik&#39;s R-Forge site: ## https://r-forge.r-project.org/projects/maxlik/ result &lt;- oprobit.reg(as.integer(js) ~ educ + age + couple + child, data = piaac) summary(result) ## Ordered Probit Regression ## Log-Likelihood: -1436.441 ## No. Iterations: 5 ## McFadden&#39;s R2: 0.003613072 ## AIC: 2888.883 ## Estimate Std. error t value Pr(&gt;|t|) ## educ 0.0305033 0.0120428 2.5329 0.01131 * ## age 0.0068156 0.0030683 2.2213 0.02633 * ## couple -0.0841328 0.1514264 -0.5556 0.57848 ## child -0.0110474 0.0403781 -0.2736 0.78439 ## ----- Threshold Parameters ----- ## Estimate Std. error t value Pr(&gt;|t|) ## Threshold (1-&gt;2) -1.77151 0.29171 -6.0728 1.257e-09 *** ## Threshold (2-&gt;3) -0.63336 0.27364 -2.3146 0.02064 * ## Threshold (3-&gt;4) 0.41447 0.27343 1.5158 0.12957 ## Threshold (4-&gt;5) 2.02784 0.27761 7.3047 2.778e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 平均限界効果は同じくoglmxのmargins.oglmx()という関数を用います． margins.oglmx(result) ## Marginal Effects on Pr(Outcome==1) ## Marg. Eff Std. error t value Pr(&gt;|t|) ## couple 1.6584e-03 2.7523e-03 0.6026 0.54679 ## educ -6.5916e-04 3.1473e-04 -2.0943 0.03623 * ## age -1.4728e-04 7.6962e-05 -1.9137 0.05566 . ## child 2.3873e-04 8.7451e-04 0.2730 0.78486 ## ------------------------------------ ## Marginal Effects on Pr(Outcome==2) ## Marg. Eff Std. error t value Pr(&gt;|t|) ## couple 0.01248158 0.02148408 0.5810 0.56126 ## educ -0.00472759 0.00188871 -2.5031 0.01231 * ## age -0.00105633 0.00048038 -2.1989 0.02788 * ## child 0.00171220 0.00625940 0.2735 0.78444 ## ------------------------------------ ## Marginal Effects on Pr(Outcome==3) ## Marg. Eff Std. error t value Pr(&gt;|t|) ## couple 0.01823813 0.03347800 0.5448 0.58591 ## educ -0.00646781 0.00258424 -2.5028 0.01232 * ## age -0.00144516 0.00065647 -2.2014 0.02771 * ## child 0.00234246 0.00856280 0.2736 0.78442 ## ------------------------------------ ## Marginal Effects on Pr(Outcome==4) ## Marg. Eff Std. error t value Pr(&gt;|t|) ## couple -0.01881137 0.03198370 -0.5882 0.55643 ## educ 0.00718784 0.00287254 2.5023 0.01234 * ## age 0.00160604 0.00072992 2.2003 0.02779 * ## child -0.00260323 0.00951600 -0.2736 0.78442 ## ------------------------------------ ## Marginal Effects on Pr(Outcome==5) ## Marg. Eff Std. error t value Pr(&gt;|t|) ## couple -0.01356679 0.02569570 -0.5280 0.59751 ## educ 0.00466671 0.00186074 2.5080 0.01214 * ## age 0.00104272 0.00047297 2.2046 0.02748 * ## child -0.00169015 0.00617836 -0.2736 0.78442 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 実証例 8.3 （多項ロジット） pp.365-366．まず，データを加工します． データの読み込み・加工 piaac_original &lt;- read.csv(&quot;piaac.csv&quot;) piaac_female &lt;- subset(piaac_original, gender == &quot;Female&quot;) piaac &lt;- mlogit::mlogit.data(piaac_female, choice = &quot;empstat_edt&quot;, shape = &quot;wide&quot;) 多項ロジット・モデル 多項ロジット・モデルの推定には，mlogitパッケージのmlogit()という関数が便利です． library(mlogit) result &lt;- mlogit(empstat_edt ~ 1 | educ + age + couple + child, reflevel = &quot;3&quot;, data = piaac) summary(result) ## ## Call: ## mlogit(formula = empstat_edt ~ 1 | educ + age + couple + child, ## data = piaac, reflevel = &quot;3&quot;, method = &quot;nr&quot;) ## ## Frequencies of alternatives:choice ## 3 1 2 ## 0.38065 0.28506 0.33429 ## ## nr method ## 4 iterations, 0h:0m:0s ## g&#39;(-H)^-1g = 0.000468 ## successive function values within tolerance limits ## ## Coefficients : ## Estimate Std. Error z-value Pr(&gt;|z|) ## (Intercept):1 -2.4891812 0.5739814 -4.3367 1.446e-05 *** ## (Intercept):2 -0.2080416 0.5289990 -0.3933 0.694117 ## educ:1 0.1856352 0.0321446 5.7750 7.695e-09 *** ## educ:2 0.0032559 0.0296902 0.1097 0.912677 ## age:1 0.0081549 0.0059179 1.3780 0.168200 ## age:2 0.0071771 0.0054852 1.3085 0.190718 ## couple:1 -0.8978057 0.1857095 -4.8345 1.335e-06 *** ## couple:2 -0.5414821 0.1830675 -2.9578 0.003098 ** ## child:1 0.0849287 0.0666004 1.2752 0.202239 ## child:2 0.0837459 0.0626562 1.3366 0.181355 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Log-Likelihood: -1874 ## McFadden R^2: 0.017435 ## Likelihood ratio test : chisq = 66.504 (p.value = 2.4316e-11) 平均限界効果の計算にこれといった便利な方法が見つかりませんでした．仕方がないので，自分で計算します4． model_result &lt;- result mydata &lt;- piaac coef_names_length &lt;- length(names(model_result$model)) coef_names_drop &lt;- coef_names_length - 2 coef_names &lt;- names(model_result$model)[c(-1, -coef_names_drop:-coef_names_length)] marginal_effects &lt;- sapply(coef_names, function(x) stats::effects(result, covariate = x, data = mydata), simplify = FALSE) ame &lt;- t(sapply(marginal_effects, colMeans)) ame # 1 2 3 # educ 0.0363882484 -0.0166267152 -0.019761533 # age 0.0009412598 0.0008230052 -0.001764265 # couple -0.1268631878 -0.0356907738 0.162553962 # child 0.0089617065 0.0105587969 -0.019520503 ame[, c(2, 3, 1)] # 見づらいので並び替え # 1 2 3 # educ 0.0363882484 -0.0166267152 -0.019761533 # age 0.0009412598 0.0008230052 -0.001764265 # couple -0.1268631878 -0.0356907738 0.162553962 # child 0.0089617065 0.0105587969 -0.019520503 標準誤差は次の通り計算してみましょう． ame_fun &lt;- function(betas) { tmp &lt;- model_result tmp$coefficients &lt;- betas me_mnl &lt;- sapply(coef_names, function(x) effects(tmp, covariate = x, data = mydata), simplify = FALSE) c(sapply(me_mnl, colMeans)) } grad &lt;- numDeriv::jacobian(ame_fun, model_result$coef) ame_se &lt;- matrix(sqrt(diag(grad %*% vcov(model_result) %*% t(grad))), nrow = length(coef_names), byrow = TRUE) ame_se # [,1] [,2] [,3] # [1,] 0.005909444 0.005503409 0.005762793 # [2,] 0.001113900 0.001049001 0.001086593 # [3,] 0.037055885 0.029879947 0.033409403 # [4,] 0.013378596 0.010627150 0.011153053 ame_se[, c(2, 3, 1)] # [,1] [,2] [,3] # [1,] 0.005503409 0.005762793 0.005909444 # [2,] 0.001049001 0.001086593 0.001113900 # [3,] 0.029879947 0.033409403 0.037055885 # [4,] 0.010627150 0.011153053 0.013378596 \\(Z\\)値は次の通りです． z &lt;- ame[, c(2, 3, 1)] / ame_se[, c(2, 3, 1)] z # 1 2 3 # educ 6.6119466 -2.8851837 -3.344060 # age 0.8972914 0.7574184 -1.583862 # couple -4.2457635 -1.0682853 4.386725 # child 0.8432841 0.9467181 -1.459085 \\(p\\)値は次の通りです． p &lt;- 2 * (1 - pnorm(abs(z))) p # 1 2 3 # educ 3.792988e-11 0.003911853 8.256197e-04 # age 3.695634e-01 0.448799257 1.132251e-01 # couple 2.178504e-05 0.285391843 1.150704e-05 # child 3.990696e-01 0.343782459 1.445418e-01 実証例8.4 （トービット） pp.371-372. データの読み込み・加工 piaac_original &lt;- read.csv(&quot;piaac.csv&quot;) piaac &lt;- subset(piaac_original, gender == &quot;Female&quot;) OLS ols &lt;- lm(hours ~ educ + age + couple + child, data = piaac) summary(ols) ## ## Call: ## lm(formula = hours ~ educ + age + couple + child, data = piaac) ## ## Residuals: ## Min 1Q Median 3Q Max ## -30.49 -19.06 0.03 16.49 80.83 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 11.98657 4.15323 2.886 0.003949 ** ## educ 0.85299 0.23203 3.676 0.000244 *** ## age 0.04638 0.04340 1.068 0.285450 ## couple -6.80806 1.34330 -5.068 4.45e-07 *** ## child 0.67291 0.44251 1.521 0.128525 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 18.63 on 1731 degrees of freedom ## (969 observations deleted due to missingness) ## Multiple R-squared: 0.0216, Adjusted R-squared: 0.01934 ## F-statistic: 9.553 on 4 and 1731 DF, p-value: 1.222e-07 トービット・モデル トービット・モデルの推定には，censRegというパッケージのcensReg()関数が便利です． library(censReg) ## ## Please cite the &#39;censReg&#39; package as: ## Henningsen, Arne (2017). censReg: Censored Regression (Tobit) Models. R package version 0.5. http://CRAN.R-Project.org/package=censReg. ## ## If you have questions, suggestions, or comments regarding the &#39;censReg&#39; package, please use a forum or &#39;tracker&#39; at the R-Forge site of the &#39;sampleSelection&#39; project: ## https://r-forge.r-project.org/projects/sampleselection/ tobit &lt;- censReg(hours ~ educ + age + couple + child, data = piaac) summary(tobit) ## ## Call: ## censReg(formula = hours ~ educ + age + couple + child, data = piaac) ## ## Observations: ## Total Left-censored Uncensored Right-censored ## 1736 608 1128 0 ## ## Coefficients: ## Estimate Std. error t value Pr(&gt; t) ## (Intercept) -0.26880 6.31684 -0.043 0.966058 ## educ 1.29136 0.35170 3.672 0.000241 *** ## age 0.09362 0.06668 1.404 0.160319 ## couple -9.43196 1.99461 -4.729 2.26e-06 *** ## child 0.99635 0.66882 1.490 0.136301 ## logSigma 3.28764 0.02316 141.963 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Newton-Raphson maximisation, 9 iterations ## Return code 1: gradient close to zero (gradtol) ## Log-likelihood: -5856.426 on 6 Df 実証例8.5 （ヘキット） pp.386-388. データの読み込み・加工 piaac_original &lt;- read.csv(&quot;piaac.csv&quot;) piaac &lt;- subset(piaac_original, gender == &quot;Female&quot;) piaac$lwage &lt;- log(piaac$wage) piaac$exp &lt;- piaac$age - piaac$educ - 6 piaac$expsq &lt;- (piaac$exp) ^ 2 piaac$selected &lt;- 1 * (!is.na(piaac$lwage)) OLS ols &lt;- lm(lwage ~ educ + exp + expsq, data = piaac) summary(ols) ## ## Call: ## lm(formula = lwage ~ educ + exp + expsq, data = piaac) ## ## Residuals: ## Min 1Q Median 3Q Max ## -9.9565 -0.2838 -0.0544 0.2516 5.5254 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.8946054 0.1279650 46.064 &lt; 2e-16 *** ## educ 0.0767333 0.0089127 8.609 &lt; 2e-16 *** ## exp 0.0124602 0.0047378 2.630 0.00862 ** ## expsq -0.0002220 0.0001013 -2.191 0.02862 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.663 on 1583 degrees of freedom ## (1118 observations deleted due to missingness) ## Multiple R-squared: 0.05641, Adjusted R-squared: 0.05463 ## F-statistic: 31.55 on 3 and 1583 DF, p-value: &lt; 2.2e-16 ヘキット・モデル ヘキット・モデルの推定は，sampleSelectionというパッケージのheckit()関数が便利です． library(sampleSelection) twostep &lt;- heckit(selected ~ educ + exp + expsq + couple + child, lwage ~ educ + exp + expsq, data = piaac, method = &quot;2step&quot;) summary(twostep) ## -------------------------------------------- ## Tobit 2 model (sample selection model) ## 2-step Heckman / heckit estimation ## 1747 observations (763 censored and 984 observed) ## 13 free parameters (df = 1735) ## Probit selection equation: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.1734568 0.2987755 -3.928 8.92e-05 *** ## educ 0.0032513 0.0171564 0.190 0.8497 ## exp 0.1332373 0.0144499 9.221 &lt; 2e-16 *** ## expsq -0.0023922 0.0002509 -9.533 &lt; 2e-16 *** ## couple -0.2876216 0.0938053 -3.066 0.0022 ** ## child 0.0013419 0.0309743 0.043 0.9654 ## Outcome equation: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.7862247 0.6725489 8.603 &lt; 2e-16 *** ## educ 0.0861687 0.0131580 6.549 7.62e-11 *** ## exp 0.0091285 0.0339531 0.269 0.788 ## expsq -0.0001668 0.0006090 -0.274 0.784 ## Multiple R-Squared:0.0526, Adjusted R-Squared:0.0488 ## Error terms: ## Estimate Std. Error t value Pr(&gt;|t|) ## invMillsRatio 0.02771 0.38986 0.071 0.943 ## sigma 0.71505 NA NA NA ## rho 0.03875 NA NA NA ## -------------------------------------------- mle &lt;- heckit(selected ~ educ + exp + expsq + couple + child, lwage ~ educ + exp + expsq, data = piaac, method = &quot;ml&quot;) summary(mle) ## -------------------------------------------- ## Tobit 2 model (sample selection model) ## Maximum Likelihood estimation ## Newton-Raphson maximisation, 3 iterations ## Return code 8: successive function values within relative tolerance limit (reltol) ## Log-Likelihood: -2207.948 ## 1747 observations (763 censored and 984 observed) ## 12 free parameters (df = 1735) ## Probit selection equation: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.1749600 0.2991461 -3.928 8.91e-05 *** ## educ 0.0033490 0.0171841 0.195 0.84550 ## exp 0.1331523 0.0144494 9.215 &lt; 2e-16 *** ## expsq -0.0023909 0.0002509 -9.528 &lt; 2e-16 *** ## couple -0.2882325 0.0937756 -3.074 0.00215 ** ## child 0.0022663 0.0312037 0.073 0.94211 ## Outcome equation: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.7679381 0.3473704 16.605 &lt; 2e-16 *** ## educ 0.0861431 0.0131388 6.556 7.25e-11 *** ## exp 0.0100524 0.0175793 0.572 0.568 ## expsq -0.0001834 0.0003119 -0.588 0.557 ## Error terms: ## Estimate Std. Error t value Pr(&gt;|t|) ## sigma 0.71536 0.01689 42.342 &lt;2e-16 *** ## rho 0.05457 0.22029 0.248 0.804 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## -------------------------------------------- このスレッドを参考にしました．How to get average marginal effects (AMEs) with standard errors of a multinomial logit model?↩︎ "],["ci.html", "第9章 政策評価モデル 図 9-5", " 第9章 政策評価モデル 実証例が少なくて寂しいですね．第2版で増えることを祈りましょう． 図 9-5 もっと良い描き方がありそうです．あったら，教えてください． library(tidyverse) munic1 &lt;- haven::read_dta(&quot;munic.dta&quot;) munic1$bin_voters96 &lt;- cut(munic1$voters96, breaks = c(seq(500, 200000, 4000)), labels = c(seq(2500, 198000, 4000))) munic2 &lt;- munic1 %&gt;% select(voters96, bin_voters96, r_util94, r_util98, r_util02) %&gt;% group_by(bin_voters96) %&gt;% mutate(bin_util94 = mean(r_util94, na.rm = T), bin_util98 = mean(r_util98, na.rm = T), bin_util02 = mean(r_util02, na.rm = T), ) munic4plot &lt;- munic2 %&gt;% select(r_util94, r_util98, r_util02, voters96, bin_voters96, bin_util94, bin_util98, bin_util02) %&gt;% pivot_longer(!c(r_util94, r_util98, r_util02, voters96, bin_voters96), names_to = &quot;year&quot;, values_to = &quot;turnout&quot;) munic4plot$year &lt;- factor(munic4plot$year, levels = c(&quot;bin_util94&quot;, &quot;bin_util98&quot;, &quot;bin_util02&quot;)) ggplot(munic4plot, aes(x = as.integer(as.character(bin_voters96)), y = turnout, colour = year)) + geom_point() + geom_smooth(aes(x = voters96, y = r_util94, colour = &quot;bin_util94&quot;), data = subset(munic4plot, 5000 &lt; voters96 &amp; voters96 &lt; 40500), method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = F) + geom_smooth(aes(x = voters96, y = r_util94, colour = &quot;bin_util94&quot;), data = subset(munic4plot, 40500 &lt; voters96 &amp; voters96 &lt; 100000), method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = F) + geom_smooth(aes(x = voters96, y = r_util98, colour = &quot;bin_util98&quot;), data = subset(munic4plot, 5000 &lt; voters96 &amp; voters96 &lt; 40500), method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = F) + geom_smooth(aes(x = voters96, y = r_util98, colour = &quot;bin_util98&quot;), data = subset(munic4plot, 40500 &lt; voters96 &amp; voters96 &lt; 100000), method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = F) + geom_smooth(aes(x = voters96, y = r_util02, colour = &quot;bin_util02&quot;), data = subset(munic4plot, 5000 &lt; voters96 &amp; voters96 &lt; 40500), method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = F) + geom_smooth(aes(x = voters96, y = r_util02, colour = &quot;bin_util02&quot;), data = subset(munic4plot, 40500 &lt; voters96 &amp; voters96 &lt; 100000), method = &quot;lm&quot;, formula = y ~ x + I(x^2), se = F) + geom_vline(xintercept = 40500, linetype = &quot;dotted&quot;) + coord_cartesian( xlim = c(8000, 97000), ylim = c(0.6, 1)) + xlab(&quot;有権者登録数 - 1996&quot;) + ylab(&quot;有効票率&quot;) + theme_bw(base_family = &quot;HiraKakuPro-W3&quot;) + scale_colour_manual(values = c(&quot;#00BA38&quot;, &quot;#619cff&quot;, &quot;#f8766d&quot;), name = &quot;&quot;, labels = c(&quot;有効票/投票数 - 1994選挙（紙のみ）&quot;, &quot;有効票/投票数 - 1998（4万5000人以上のみ電子投票）&quot;, &quot;有効票/投票数 - 2002（電子投票のみ）&quot;)) + theme(plot.margin = margin(0.5, 3, 0.5, 2, &quot;cm&quot;), legend.position = &quot;bottom&quot;, legend.direction = &quot;vertical&quot;) + labs(title = &quot;電子投票制度の導入が有効票率に与えた影響&quot;, caption = &quot;（出所）Fujiwara (2015), Figure 2, p.435.&quot;) ちなみに，有斐閣のウェブサイトで公開されているStataのdoファイルを実行すると，次のグラフが出力されます． "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
